const vec2 pixelSize = vec2(0.03);


vec2 pixelate(vec2 coord, vec2 size)
{
    return floor( coord / size ) * size;
}

vec2 getMod(vec2 coord, vec2 size)
{
    return mod( coord , size) / size;
}

float character(float n, vec2 p)
{
    p = floor(p*vec2(4.0, -4.0) + 2.5);
    if (clamp(p.x, 0.0, 4.0) == p.x && clamp(p.y, 0.0, 4.0) == p.y)
    {
        if (int(mod(n/exp2(p.x + 5.0*p.y), 2.0)) == 1) return 1.0;
    }
    return 0.0;
}

using namespace std;

void main(in Texture2d myTex, out vec4 Color  ) {

  vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    
	vec2 uv = fragCoord/getRenderTargetSize().xy;
    uv.x *= getRenderTargetSize().x / getRenderTargetSize().y;
    
    vec2 pixCoord = pixelate(uv, pixelSize);

    vec4 color = myTex.sample(pixCoord);
    float gray = (color.r + color.g + color.b) / 3.0;

    float n =  65536.0;             // .	2^16
    if (gray > 0.2) n = 65600.0;    // :	2^6 + 2^16
    if (gray > 0.3) n = 332772.0;   // *	2^2 + 2^5 + 2^6 + 2^7 + 2^8 + 2^9 + 2^12 + 2^16 + 2^18
    if (gray > 0.4) n = 15255086.0; // o	2^1 + 2^2 + 2^3 + 2^5 + 2^9 + 2^10 + 2^14 + 2^15 + 2^19 + 2^21 + 2^22 + 2^23
    if (gray > 0.5) n = 23385164.0; // &	...
    if (gray > 0.6) n = 15252014.0; // 8	...
    if (gray > 0.7) n = 13199452.0; // @	...
    if (gray > 0.8) n = 11512810.0; // #	...

    // get the mod..
    vec2 modd = getMod(uv, vec2(pixelSize));

    Color = color * character( n, vec2(-1.0) + modd * 2.0);
}