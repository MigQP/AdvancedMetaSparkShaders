using namespace std;

vec3 thermal_vision(in vec3 color) {
  vec3 colors[3];
  colors[0] = vec3(0.0, 0.0, 1.0);
  colors[1] = vec3(1.0, 1.0, 0.0);
  colors[2] = vec3(1.0, 0.0, 0.0);
  float luminance = dot(vec3(0.40, 0.38, 0.25), color);
  if(luminance < 0.5) {
    color = mix(colors[0], colors[1], luminance / 0.5);
  } else {
    color = mix(colors[1], colors[2], (luminance - 0.5) / 0.5);   
  }
  return color;
}

float scanline(vec2 uv) {
return sin(getRenderTargetSize().y * uv.y * 0.7 - getTime() * 10.0);
}

float slowscan(vec2 uv) {
return sin(getRenderTargetSize().y * uv.y * 0.02 + getTime() * 6.0);
}

vec2 colorShift(vec2 uv) {
return vec2(
  uv.x,
  uv.y + sin(getTime())*0.2
);
}

float noise(vec2 uv, std::Texture2d myTex2) {
return clamp(myTex2.sample(uv.xy + getTime()*6.0).r +
  //texture(iChannel1, uv.xy - getTime() *4.0).g, 0.96, 1.0);
  myTex2.sample(uv.xy - getTime() *4.0).g, 0.96, 1.0);
  
}

vec2 crt(vec2 coord, float bend) {
// put in symmetrical coords
coord = (coord - 0.5) * 2.0;

coord *= 0.5;	

// deform coords
coord.x *= 1.0 + pow((abs(coord.y) / bend), 2.0);
coord.y *= 1.0 + pow((abs(coord.x) / bend), 2.0);

// transform back to 0.0 - 1.0 space
coord  = (coord / 1.0) + 0.5;

return coord;
}

vec2 colorshift(vec2 uv, float amount, float rand) {

  return vec2(
    uv.x,
    uv.y + amount * rand * sin(uv.y * getRenderTargetSize().y * 0.9 + getTime())
  );
}

vec2 scandistort(vec2 uv, std::Texture2d myTex3) {
  float scan1 = clamp(cos(uv.y * 2.0 + getTime()), 0.0, 1.0);
  float scan2 = clamp(cos(uv.y * 2.0 + getTime() + 4.0) * 100.0, 0.0, 2.3) ;
  float amount = scan1 * scan2 * uv.x; 

  uv.x -= 0.05 * mix(myTex3.sample(vec2(uv.x, amount)).r * amount, amount, 0.3);

  return uv;
  
}


void main(in std::Texture2d myTex, in std::Texture2d myTex1, out vec4 Color  ) {

  vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));

  vec2 uv = fragCoord.xy / getRenderTargetSize().xy;
    //vec3 color = texture(iChannel0, uv).rgb;
    vec3 color = myTex.sample(uv).rgb;
    color.rgb = thermal_vision(color.rgb);
    
  vec2 sd_uv = scandistort(uv, myTex1);
  vec2 crt_uv = crt(sd_uv, 2.0);
    
  //vec4 rand = texture(iChannel1, vec2(getTime() * 0.01, getTime() * 0.02));
  vec4 rand = myTex1.sample(vec2(getTime() * 0.01, getTime() * 0.02));
    
  color.r = 0.0;
  color.g = myTex.sample(crt(colorshift(sd_uv, 0.01, rand.r), 2.0)).g;
  color.b = myTex.sample(crt(colorshift(sd_uv, 0.024, rand.b), 2.0)).b * 2.0;
  //color.b = texture(iChannel0, crt(colorshift(sd_uv, 0.024, rand.b), 2.0)).b * 2.0;	
    
  vec3 scanline_color = vec3(scanline(crt_uv));
  vec3 slowscan_color = vec3(slowscan(crt_uv));
  scanline_color.r = 0.0;
  slowscan_color.r = 0.0;
    

  //Color.rgb = mix(color, mix(scanline_color, slowscan_color, 0.5), 0.05) * noise(uv, myTex1);
  Color.rgb = mix(color, mix(scanline_color, slowscan_color, 0.5), 0.05) * float(clamp(myTex1.sample(uv.xy + getTime()*6.0).r + myTex1.sample(uv.xy - getTime() *4.0).g, 0.96, 1.0));
    
    Color = vec4(thermal_vision(Color.rgb), 1.0);
    
    Color.r = Color.b * 0.4;
    Color.g = Color.b * 0.8;
    Color.b = Color.b * 1.85;
}
