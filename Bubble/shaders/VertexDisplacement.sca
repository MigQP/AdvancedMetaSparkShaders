using namespace std;

// Function to shift hue in HSL color space
vec3 hueShift(vec3 color, float shift) {
  // Convert RGB to HSL
  float maxVal = max(max(color.r, color.g), color.b);
  float minVal = min(min(color.r, color.g), color.b);

  float lightness = (maxVal + minVal) / 2.0;
  float saturation = 0.0;

  if (maxVal != minVal) {
      saturation = (lightness < 0.5) ? (maxVal - minVal) / (maxVal + minVal) : (maxVal - minVal) / (2.0 - maxVal - minVal);
  }

  float hue;

  if (maxVal == color.r) {
      hue = (color.g - color.b) / (maxVal - minVal);
  } else if (maxVal == color.g) {
      hue = 2.0 + (color.b - color.r) / (maxVal - minVal);
  } else {
      hue = 4.0 + (color.r - color.g) / (maxVal - minVal);
  }

  hue = mod(hue + shift, 6.0); // Shift the hue within [0, 6]
  if (hue < 0.0) {
      hue += 6.0;
  }

  // Convert back to RGB
  float c = (1.0 - abs(2.0 * lightness - 1.0)) * saturation;
  float x = c * (1.0 - abs(mod(hue, 2.0) - 1.0));
  float m = lightness - c / 2.0;

  vec3 shiftedColor;
  if (hue < 1.0) {
      shiftedColor = vec3(c, x, 0.0);
  } else if (hue < 2.0) {
      shiftedColor = vec3(x, c, 0.0);
  } else if (hue < 3.0) {
      shiftedColor = vec3(0.0, c, x);
  } else if (hue < 4.0) {
      shiftedColor = vec3(0.0, x, c);
  } else if (hue < 5.0) {
      shiftedColor = vec3(x, 0.0, c);
  } else {
      shiftedColor = vec3(c, 0.0, x);
  }

  return shiftedColor + vec3(m);
}

void main (float bias, float scale, float power, Texture2d tex, in vec4 fresnelColor, float tiling, float amplitude, float frequency, out vec4 Color, out vec4 Position)
{
  vec2 uv = getVertexTexCoord();
  vec4 position = getVertexPosition();
  vec3 normal = getVertexNormal();

  vec3 sinValue = sin(position.xyz * tiling + getTime() * frequency) * 0.5 + 0.5;
  sinValue += amplitude;
  position = vec4(position.xyz + normal * sinValue, position.w);
  Position = getModelViewProjectionMatrix() * position;

  vec4 col = tex.sample(uv);
  //Color = col;
  //Color = fresnelColor;

  // A fresnel shader is a shader that calculates how much of the geometry is facing the camera. 
  // The brighter the value, the more it is facing away.

  // First we calculat the vertex position in world space
  vec3 worldPosition = (getModelMatrix() * getVertexPosition()).xyz;

  // Then we do the same for the vertex normal
  vec3 worldNormal = (getModelMatrix() * vec4(getVertexNormal(), 0.0)).xyz;

  // Here we calculate a direction vector from the vertex position to the camera position
  vec3 I = normalize(worldPosition - getCameraPosition().xyz);

  // This is where we calculate how much of the material is facing the camera
  float facingRatio = dot(worldNormal, I);

  // A simple equation for styling the fresnel
  float fresnel = bias + scale * pow(1.0 + facingRatio, power);

  float clampedFresnel = clamp(fresnel, 0.0, 1.0);

  //Color = vec4(col.rgb * (clampedFresnel + 0.1), clampedFresnel + 0.1);

  //Color = vec4(fresnelColor.rgb * clampedFresnel, clampedFresnel);

  // Distortion inside mesh

  // Get the worldspace noraml
  vec3 N = normalize(getNormalMatrix() * getVertexNormal());

  // Get the fragment coordinate in screenspace
  vec2 uv1 = fragment(Position.xy ) / Position.w;
  uv1 = uv1 * 0.5 + 0.5;
  uv1.y = 1.0 - uv1.y;

  // The bigger this number, the more glass distortion there will be
  float eta = 1.14;
  
  // Use the refract function and slightly offset eta for chroma distortion
  vec2 distortionR = fragment(refract(vec3(0.0, 0.0, -1.0), N, eta).xy);
  vec2 distortionG = fragment(refract(vec3(0.0, 0.0, -1.0), N, eta + 0.005).xy);
  vec2 distortionB = fragment(refract(vec3(0.0, 0.0, -1.0), N, eta + 0.01).xy);

  // Sample the texture, adding the distortion
  vec4 colR = tex.sample(uv1 + distortionR);
  vec4 colG = tex.sample(uv1 + distortionG);
  vec4 colB = tex.sample(uv1 + distortionB);

  vec4 fres1 = vec4(fresnelColor.rgb * clampedFresnel, clampedFresnel);
  // Pack the output into a single color
  vec4 col1 = vec4(fres1.r + colR.r, fres1.g + colG.g, fres1.b + colB.b, clampedFresnel + 0.1);

  // Apply the hue shift to the distorted color
  vec3 shiftedRGB = hueShift(col1.rgb, amplitude);

  // Output the color
  Color = col1;

}