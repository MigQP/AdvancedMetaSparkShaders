
const float PI = 3.14159265359;

const float PI2 = 6.28318530718;


vec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

using namespace std;

void main(in std::Texture2d myTex,out vec4 Color) 
{
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));

    float t = (getTime()*PI)*.0675;
    vec2 si = getRenderTargetSize().xy;
    float sec = 8.;
    float s = sin(PI*(0.75-getTime())/sec)/2.+.5;
    vec2 uv=(2.*fragCoord.xy-getRenderTargetSize().xy)/getRenderTargetSize().y;
    vec2 uv2 = fragCoord.xy/getRenderTargetSize().xy;
    vec3 cam = myTex.sample(uv2).rgb;
    vec2 pos = fragCoord - si * 0.5;
    float ratio = -2.5;
    vec2 aUv = pos / (si - pos * ratio).y+.5;
    //vec3 snd = texture(iChannel0, uv2).rgb;
    vec3 snd = vec3(0.4);
    aUv.x-=.75;
    aUv.y-=1.5;
     //aUv*=abs(aUv)-dot(aUv.x, aUv.y);
    // central uv
    vec2 uvc = (2.*fragCoord.xy-si)/si.y;
    float r = dot(uv2.x, uv2.y)+t;
	//aUv*=2.5;//*s+1.25;
    vec4 col = vec4(cam, 0.);
    float a = atan(aUv.y, aUv.x)+t;
       
    float d = length(aUv);
    float s1 = 0.01+cam.x;//(snd.x*.01);
    float s2 = 0.0105+cam.z;//(snd.x*.01)+0.01;
    float f = 2.0;

    //s1+(sin(t-d*.1)*.1+.15);
    for(float i=0.;i<20.28;i+=2.528/10.){
       f+=smoothstep(s1,s2,exp(sin(a*(9.)-(s)*cos(i)*(s+snd.x*.12*.5))*.7*d+(d-i*.75)));
       f+=snd.x*.01;
       f=abs(f);
       //f+=smoothstep(s2,s1,exp(cos(a*(5.)-(s*6.)+cos(i-(s*6.))*(s*6.))*.4*d+(d-i*.4)));
    }
    //f+=t+snd.x;
    float spread=sin(t*.01)*2.21;
    col.rgb = pal( f+spread, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) );
    // Output to screen
    Color = vec4(normalize(col.rgb),1.0);
}